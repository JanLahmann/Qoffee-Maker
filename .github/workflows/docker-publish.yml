name: Docker
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [main, feature/github-actions]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  VERSION: 1.2.0

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@1e95c1de343b5b0c23352d6417ee3e48d5bcd422
        with:
          cosign-release: "v1.4.0"

      # Workarounds
      # Workaround: https://github.com/docker/buildx/issues/495
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata for ARM
        id: meta-arm
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-arm
          tags: |
            ${{ env.VERSION }}
      - name: Extract Docker metadata for AMD
        id: meta-amd
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-amd64
          tags: |
            ${{ env.VERSION }}
      # - name: Extract Docker metadata for ARM64
      #   id: meta-arm64
      #   uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     tags: |
      #       type=ref,event=branch,prefix=arm64-

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image ARM
        id: build-and-push-arm
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta-arm.outputs.tags }}
          labels: ${{ steps.meta-arm.outputs.labels }}
          file: DockerfileArm
          platforms: linux/arm/v7
      - name: Build and push Docker image AMD
        id: build-and-push-amd
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta-amd.outputs.tags }}
          labels: ${{ steps.meta-amd.outputs.labels }}
          file: DockerfileAmd64
      # - name: Build and push Docker image ARM64
      #   id: build-and-push-arm
      #   uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      #   with:
      #     context: .
      #     tags: ${{ steps.meta-arm.outputs.tags }}
      #     labels: ${{ steps.meta-arm.outputs.labels }}
      #     file: DockerfileArm64
      #     platforms: linux/arm64
      #
      - name: Create Docker manifest
        run: |
          set -x
          CONTAINER_REPO=`echo ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]'`
          echo $CONTAINER_REPO
          #echo inspect manifest file arm
          #RESULT=`docker manifest inspect $CONTAINER_REPO-arm:${{ env.VERSION }}`
          #echo $RESULT
          echo creating version manifest list
          docker manifest create $CONTAINER_REPO:${{ env.VERSION }} $CONTAINER_REPO-arm:${{ env.VERSION }} $CONTAINER_REPO-amd64:${{ env.VERSION }}
          echo pushing version manifest list
          docker manifest push $CONTAINER_REPO:${{ env.VERSION }}
          echo creating latest manifest list
          docker manifest create $CONTAINER_REPO:latest $CONTAINER_REPO-arm:${{ env.VERSION }} $CONTAINER_REPO-amd64:${{ env.VERSION }}
          echo pushing latest manifest list
          docker manifest push $CONTAINER_REPO:latest
          
